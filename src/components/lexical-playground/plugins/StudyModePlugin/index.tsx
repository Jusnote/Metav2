/**
 * Plugin para controlar visibilidade progressiva do conte√∫do no modo estudo dirigido
 * Usa uma abordagem h√≠brida: Lexical nodes + DOM direto para elementos decoradores
 */

import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import { $getRoot, $isElementNode } from 'lexical';
import { $isHeadingNode } from '@lexical/rich-text';
import { useEffect, useRef } from 'react';
import { useStudyMode } from '@/hooks/useStudyMode';

export default function StudyModePlugin(): JSX.Element | null {
  const [editor] = useLexicalComposerContext();
  const { isStudyModeEnabled, currentSectionIndex } = useStudyMode();
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    // Limpar timeout anterior se existir
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    // Fun√ß√£o para processar visibilidade (h√≠brida: Lexical + DOM)
    const processVisibility = () => {
      // Parte 1: Processar n√≥s do Lexical
      editor.update(() => {
        const root = $getRoot();
        
        console.log('üéØ StudyModePlugin: processando visibilidade, modo ativo:', isStudyModeEnabled, 'se√ß√£o atual:', currentSectionIndex);
        
        // Fun√ß√£o para limpar todas as classes primeiro
        function cleanAllNodes(node: any) {
          if ($isElementNode(node)) {
            const element = editor.getElementByKey(node.getKey());
            if (element) {
              element.classList.remove('study-mode-hidden');
              element.removeAttribute('data-study-section');
            }
            
            // Processar filhos recursivamente
            const children = node.getChildren();
            children.forEach(cleanAllNodes);
          }
        }
        
        // Se modo estudo n√£o est√° ativo, mostrar todo conte√∫do
        if (!isStudyModeEnabled) {
          console.log('üìñ Modo estudo desativado, mostrando todo conte√∫do');
          const children = root.getChildren();
          children.forEach(cleanAllNodes);
          
          // Tamb√©m limpar estilos CSS globais
          setTimeout(() => {
            const style = document.getElementById('study-mode-styles');
            if (style) {
              style.remove();
            }
          }, 0);
          return;
        }

        // Se modo estudo est√° ativo, aplicar visibilidade progressiva
        console.log('üìö Modo estudo ativo, aplicando visibilidade progressiva');
        
        // Primeiro, limpar todas as classes
        const children = root.getChildren();
        children.forEach(cleanAllNodes);
        
        // Encontrar todos os H1s e suas posi√ß√µes
        const h1Positions: { index: number; nodeIndex: number; node: any }[] = [];
        
        children.forEach((node, nodeIndex) => {
          if ($isHeadingNode(node) && node.getTag() === 'h1') {
            h1Positions.push({
              index: h1Positions.length, // √çndice da se√ß√£o H1 (0, 1, 2...)
              nodeIndex: nodeIndex, // Posi√ß√£o no array de children
              node: node
            });
            console.log(`üìç H1 encontrado na posi√ß√£o ${nodeIndex}, se√ß√£o ${h1Positions.length - 1}:`, node.getTextContent());
          }
        });

        console.log(`üìä Total de se√ß√µes H1: ${h1Positions.length}, mostrando se√ß√£o: ${currentSectionIndex}`);

        if (h1Positions.length === 0) {
          console.log('‚ö†Ô∏è Nenhum H1 encontrado, mostrando todo conte√∫do');
          return;
        }

        // Determinar quais n√≥s pertencem √† se√ß√£o atual
        const currentH1 = h1Positions.find(h1 => h1.index === currentSectionIndex);
        
        if (!currentH1) {
          console.log(`‚ö†Ô∏è Se√ß√£o ${currentSectionIndex} n√£o encontrada`);
          return;
        }

        const nextH1 = h1Positions.find(h1 => h1.index === currentSectionIndex + 1);
        
        const startIndex = currentH1.nodeIndex;
        const endIndex = nextH1 ? nextH1.nodeIndex : children.length;
        
        console.log(`üìë Se√ß√£o ${currentSectionIndex}: n√≥s ${startIndex} at√© ${endIndex - 1}`);

        // Marcar n√≥s com data-attributes e aplicar visibilidade
        children.forEach((node, nodeIndex) => {
          function processNodeAndChildren(n: any, sectionIndex: number) {
            if ($isElementNode(n)) {
              const element = editor.getElementByKey(n.getKey());
              if (element) {
                // Marcar com data-attribute para identificar se√ß√£o
                element.setAttribute('data-study-section', sectionIndex.toString());
                
                // Se o n√≥ n√£o est√° na se√ß√£o atual, ocultar
                if (nodeIndex < startIndex || nodeIndex >= endIndex) {
                  element.classList.add('study-mode-hidden');
                  console.log(`üö´ Ocultando n√≥ ${nodeIndex} (se√ß√£o ${sectionIndex}, atual: ${currentSectionIndex})`);
                } else {
                  console.log(`üëÅÔ∏è Mostrando n√≥ ${nodeIndex} (se√ß√£o ${sectionIndex}, atual: ${currentSectionIndex})`);
                }
              }
              
              // Processar filhos
              const children = n.getChildren();
              children.forEach(child => processNodeAndChildren(child, sectionIndex));
            }
          }
          
          // Determinar a qual se√ß√£o este n√≥ pertence
          let belongsToSection = -1;
          for (let i = h1Positions.length - 1; i >= 0; i--) {
            if (nodeIndex >= h1Positions[i].nodeIndex) {
              belongsToSection = h1Positions[i].index;
              break;
            }
          }
          
          processNodeAndChildren(node, belongsToSection);
        });

        console.log(`‚úÖ Visibilidade Lexical aplicada para se√ß√£o ${currentSectionIndex}`);
      });
      
      // Parte 2: Aplicar CSS global e debug DOM
      setTimeout(() => {
        const editorElement = editor.getRootElement();
        if (!editorElement) {
          console.log('‚ùå Editor root element n√£o encontrado');
          return;
        }

        console.log('üîç DEBUG: Editor element:', editorElement);

        // Remover estilos anteriores
        const existingStyle = document.getElementById('study-mode-styles');
        if (existingStyle) {
          existingStyle.remove();
        }

        if (isStudyModeEnabled) {
          // DEBUG: Listar todos os elementos no editor
          console.log('üîç DEBUG: Todos os elementos no editor:');
          const allElements = editorElement.querySelectorAll('*');
          allElements.forEach((el, idx) => {
            const tagName = el.tagName.toLowerCase();
            const classes = el.className;
            const dataSection = el.getAttribute('data-study-section');
            const isYoutube = tagName === 'iframe' && (el as HTMLIFrameElement).src?.includes('youtube');
            
            if (isYoutube || tagName === 'h1' || dataSection) {
              console.log(`  ${idx}: <${tagName}> classes:"${classes}" data-section:"${dataSection}" ${isYoutube ? 'üé• YOUTUBE' : ''}`);
            }
          });

          // Buscar todos os elementos com data-study-section
          const elementsWithSection = editorElement.querySelectorAll('[data-study-section]');
          const sectionsFound = new Set<string>();
          
          console.log(`üîç DEBUG: Encontrados ${elementsWithSection.length} elementos com data-study-section`);
          
          elementsWithSection.forEach((element, idx) => {
            const section = element.getAttribute('data-study-section');
            const tagName = element.tagName.toLowerCase();
            console.log(`  ${idx}: <${tagName}> se√ß√£o: ${section}`);
            if (section) sectionsFound.add(section);
          });
          
          console.log('üé® Aplicando CSS para se√ß√µes encontradas:', Array.from(sectionsFound));

          // Fun√ß√£o helper para associar elementos decoradores √†s se√ß√µes
          function associateElementToSection(element: Element, elementType: string, idx: number) {
            // Estrat√©gia 1: Buscar parent com data-study-section
            let parent = element.closest('[data-study-section]');
            let parentSection = parent?.getAttribute('data-study-section');
            
            // Estrat√©gia 2: Se n√£o encontrou, buscar por posi√ß√£o no DOM
            if (!parentSection) {
              console.log(`üîç ${elementType} ${idx}: parent n√£o encontrado, buscando por posi√ß√£o...`);
              
              // Encontrar todos os H1s no DOM
              const h1Elements = Array.from(editorElement.querySelectorAll('h1'));
              
              // Verificar a posi√ß√£o do elemento em rela√ß√£o aos H1s
              const allElements = Array.from(editorElement.querySelectorAll('*'));
              const elementIndex = allElements.indexOf(element);
              
              console.log(`üîç ${elementType} est√° na posi√ß√£o DOM: ${elementIndex}`);
              
              for (let i = h1Elements.length - 1; i >= 0; i--) {
                const h1Index = allElements.indexOf(h1Elements[i]);
                const h1Section = h1Elements[i].getAttribute('data-study-section');
                
                if (elementIndex > h1Index && h1Section) {
                  parentSection = h1Section;
                  console.log(`‚úÖ ${elementType} pertence √† se√ß√£o ${h1Section} (ap√≥s H1 na posi√ß√£o ${h1Index})`);
                  break;
                }
              }
            }
            
            console.log(`  ${idx}: ${elementType}, parent section: ${parentSection}`);
            
            // For√ßar data-attribute no elemento
            if (parentSection) {
              element.setAttribute('data-study-section', parentSection);
              console.log(`üè∑Ô∏è Marcado ${elementType} com data-study-section="${parentSection}"`);
            } else {
              console.log(`‚ö†Ô∏è N√£o foi poss√≠vel determinar a se√ß√£o do ${elementType} ${idx}`);
            }
          }

          // Buscar especificamente por iframes do YouTube
          const youtubeIframes = editorElement.querySelectorAll('iframe[src*="youtube"]');
          console.log(`üé• DEBUG: Encontrados ${youtubeIframes.length} iframes do YouTube:`);
          youtubeIframes.forEach((iframe, idx) => {
            associateElementToSection(iframe, 'YouTube iframe', idx);
          });

          // Buscar por Horizontal Rules (HR)
          const horizontalRules = editorElement.querySelectorAll('hr');
          console.log(`üìè DEBUG: Encontrados ${horizontalRules.length} horizontal rules:`);
          horizontalRules.forEach((hr, idx) => {
            associateElementToSection(hr, 'Horizontal Rule', idx);
          });

          // Buscar por Page Breaks (podem ter classes espec√≠ficas)
          const pageBreaks = editorElement.querySelectorAll('.page-break, [data-lexical-page-break], .PageBreak__hr');
          console.log(`üìÑ DEBUG: Encontrados ${pageBreaks.length} page breaks:`);
          pageBreaks.forEach((pageBreak, idx) => {
            associateElementToSection(pageBreak, 'Page Break', idx);
          });

          // Buscar por outros elementos decoradores comuns
          const decoratorElements = editorElement.querySelectorAll('figure, .embed-block, [data-lexical-decorator]');
          console.log(`üé® DEBUG: Encontrados ${decoratorElements.length} elementos decoradores:`);
          decoratorElements.forEach((decorator, idx) => {
            if (!decorator.getAttribute('data-study-section')) {
              associateElementToSection(decorator, 'Decorator Element', idx);
            }
          });
          
          // Criar estilos CSS mais espec√≠ficos
          const style = document.createElement('style');
          style.id = 'study-mode-styles';
          
          let cssRules = '';
          
          // Ocultar todas as se√ß√µes exceto a atual
          sectionsFound.forEach(section => {
            if (parseInt(section) !== currentSectionIndex) {
              cssRules += `[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `[data-study-section="${section}"] * { display: none !important; }\n`;
            }
          });
          
          // Regras espec√≠ficas para elementos decoradores
          sectionsFound.forEach(section => {
            if (parseInt(section) !== currentSectionIndex) {
              cssRules += `iframe[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `hr[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `.page-break[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `[data-lexical-page-break][data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `.PageBreak__hr[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `figure[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `.embed-block[data-study-section="${section}"] { display: none !important; }\n`;
              cssRules += `[data-lexical-decorator][data-study-section="${section}"] { display: none !important; }\n`;
            }
          });
          
          style.textContent = cssRules;
          document.head.appendChild(style);
          
          console.log(`üé® CSS aplicado:`, cssRules);
          console.log(`üéØ Mostrando apenas se√ß√£o ${currentSectionIndex}`);
        } else {
          console.log('üìñ Modo estudo desativado, removendo estilos CSS');
        }
      }, 200); // Delay maior para garantir que elementos decoradores foram renderizados
    };

    // Executar imediatamente
    processVisibility();

    // Cleanup function
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [editor, isStudyModeEnabled, currentSectionIndex]);

  return null;
}
