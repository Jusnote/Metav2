import { useState, useEffect } from 'react';
import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';
import { $getRoot, $isElementNode } from 'lexical';
import { $isHeadingNode } from '@lexical/rich-text';
import { useStudyMode as useGlobalStudyModeContext } from '@/contexts/StudyModeContext';
import { useQuestions } from '@/contexts/QuestionsContext';
import { QuestionResponse } from '@/types/questions';

export interface StudyModeState {
  isReadOnly: boolean;
  isStudyModeEnabled: boolean;
  canEnableStudyMode: boolean;
  currentSectionIndex: number;
  completedSections: string[];
  isGuidedModeActive: boolean;
}

export function useStudyMode() {
  const [editor] = useLexicalComposerContext();
  const { 
    isGuidedMode, 
    isStudyModeEnabled, 
    setIsStudyModeEnabled,
    currentSectionIndex,
    setCurrentSectionIndex,
    completedSections,
    setCompletedSections,
    showCompletionToast,
    setShowCompletionToast,
    showQuestionModal,
    setShowQuestionModal,
    pendingSectionIndex,
    setPendingSectionIndex
  } = useGlobalStudyModeContext();
  const [isReadOnly, setIsReadOnly] = useState(() => !editor.isEditable());
  const [totalSections, setTotalSections] = useState(0);
  
  // Hook para gerenciar perguntas
  const { getQuestionsForSection, hasQuestions } = useQuestions();

  // Fun√ß√£o para contar total de se√ß√µes H1
  const countH1Sections = () => {
    return editor.getEditorState().read(() => {
      const root = $getRoot();
      let h1Count = 0;
      
      function countH1InNode(node: any) {
        if ($isHeadingNode(node) && node.getTag() === 'h1') {
          h1Count++;
        }
        
        if ($isElementNode(node)) {
          const children = node.getChildren();
          children.forEach(countH1InNode);
        }
      }
      
      const children = root.getChildren();
      children.forEach(countH1InNode);
      
      console.log('üìä Total de se√ß√µes H1 encontradas:', h1Count);
      return h1Count;
    });
  };

  // Atualizar contagem de se√ß√µes quando o editor mudar
  useEffect(() => {
    const updateSectionCount = () => {
      const count = countH1Sections();
      setTotalSections(count);
    };

    // Contar inicialmente
    updateSectionCount();

    // Escutar mudan√ßas no editor
    const unregister = editor.registerUpdateListener(() => {
      updateSectionCount();
    });

    return unregister;
  }, [editor]);

  // Escutar mudan√ßas no estado read-only
  useEffect(() => {
    const unregister = editor.registerEditableListener((editable) => {
      const newIsReadOnly = !editable;
      setIsReadOnly(newIsReadOnly);
      
      console.log('üìö Estado read-only mudou:', newIsReadOnly);
      
      // Se saiu do read-only, desativar modo estudo
      if (!newIsReadOnly && isStudyModeEnabled) {
        console.log('üîì Saindo do read-only, desativando modo estudo');
        setIsStudyModeEnabled(false);
        setCurrentSectionIndex(0);
        setCompletedSections([]);
      }
    });

    return unregister;
  }, [editor, isStudyModeEnabled]);

  // Escutar mudan√ßas no modo de estudo global
  useEffect(() => {
    console.log('üéì Modo de estudo global mudou:', isGuidedMode ? 'DIRIGIDO' : 'MANUAL');
    
    // Se mudou para manual, desativar modo estudo
    if (!isGuidedMode && isStudyModeEnabled) {
      console.log('üìñ Mudou para modo manual, desativando estudo dirigido');
      setIsStudyModeEnabled(false);
      setCurrentSectionIndex(0);
      setCompletedSections([]);
    }
  }, [isGuidedMode, isStudyModeEnabled]);

  // S√≥ pode habilitar se: read-only E modo dirigido
  const canEnableStudyMode = isReadOnly && isGuidedMode;

  const toggleStudyMode = () => {
    if (!canEnableStudyMode) {
      const reason = !isReadOnly ? 'n√£o est√° em read-only' : 'n√£o est√° em modo dirigido';
      console.log(`‚ùå N√£o pode habilitar modo estudo (${reason})`);
      return;
    }

    const newStudyMode = !isStudyModeEnabled;
    setIsStudyModeEnabled(newStudyMode);
    
    console.log('üìö Modo estudo:', newStudyMode ? 'ATIVADO' : 'DESATIVADO');
    
    if (newStudyMode) {
      // Reset ao ativar
      setCurrentSectionIndex(0);
      setCompletedSections([]);
    }
  };

  const completeSection = (sectionKey: string) => {
    if (!completedSections.includes(sectionKey)) {
      setCompletedSections(prev => [...prev, sectionKey]);
      console.log('‚úÖ Se√ß√£o completada:', sectionKey);
    }
  };

  const goToNextSection = () => {
    setCurrentSectionIndex(prev => {
      const nextIndex = prev + 1;
      
      // Verificar se n√£o excede o total de se√ß√µes
      if (nextIndex >= totalSections) {
        console.log('üö´ N√£o √© poss√≠vel avan√ßar: j√° na √∫ltima se√ß√£o');
        return prev; // Manter √≠ndice atual
      }
      
      console.log('‚û°Ô∏è Pr√≥xima se√ß√£o:', nextIndex);
      return nextIndex;
    });
  };

  // Completar se√ß√£o com verifica√ß√£o de perguntas
  const completeSectionWithQuestions = (sectionIndex: number) => {
    console.log('üéØ Completando se√ß√£o:', sectionIndex, 'tem perguntas:', hasQuestions(sectionIndex));
    
    // Debug: verificar perguntas dispon√≠veis
    const questionsForSection = getQuestionsForSection(sectionIndex);
    console.log('üîç Perguntas encontradas para se√ß√£o', sectionIndex, ':', questionsForSection);
    
    // Marcar se√ß√£o como completa
    const sectionKey = `section-${sectionIndex}`;
    completeSection(sectionKey);
    
    // Verificar se h√° perguntas para esta se√ß√£o
    if (hasQuestions(sectionIndex)) {
      console.log('‚ùì Se√ß√£o tem perguntas, abrindo modal');
      console.log('üîß Definindo pendingSectionIndex:', sectionIndex);
      console.log('üîß Definindo showQuestionModal:', true);
      setPendingSectionIndex(sectionIndex);
      setShowQuestionModal(true);
      console.log('‚úÖ Estados definidos - pendingSectionIndex:', sectionIndex, 'showQuestionModal:', true);
    } else {
      console.log('üìñ Se√ß√£o sem perguntas, avan√ßando diretamente');
      // Se n√£o h√° perguntas, avan√ßar diretamente
      if (sectionIndex < totalSections - 1) {
        goToNextSection();
      }
    }
  };

  // Callback quando perguntas s√£o completadas
  const handleQuestionsComplete = (responses: QuestionResponse[]) => {
    console.log('‚úÖ Perguntas completadas:', responses);
    setShowQuestionModal(false);
    setPendingSectionIndex(null);
    
    // Se √© a √∫ltima se√ß√£o, finalizar o estudo
    if (pendingSectionIndex !== null && pendingSectionIndex >= totalSections - 1) {
      console.log('üéâ √öltima se√ß√£o completada com perguntas, finalizando estudo');
      completeStudy();
    } 
    // Sen√£o, avan√ßar para pr√≥xima se√ß√£o
    else if (pendingSectionIndex !== null && pendingSectionIndex < totalSections - 1) {
      goToNextSection();
    }
  };

  // Callback quando perguntas s√£o puladas
  const handleQuestionsSkip = () => {
    console.log('‚è≠Ô∏è Perguntas puladas');
    setShowQuestionModal(false);
    setPendingSectionIndex(null);
    
    // Se √© a √∫ltima se√ß√£o, finalizar o estudo
    if (pendingSectionIndex !== null && pendingSectionIndex >= totalSections - 1) {
      console.log('üéâ √öltima se√ß√£o pulada, finalizando estudo');
      completeStudy();
    } 
    // Sen√£o, avan√ßar para pr√≥xima se√ß√£o
    else if (pendingSectionIndex !== null && pendingSectionIndex < totalSections - 1) {
      goToNextSection();
    }
  };

  // Verificar se pode avan√ßar para pr√≥xima se√ß√£o
  const canGoToNextSection = currentSectionIndex < totalSections - 1;
  
  // Verificar se √© a √∫ltima se√ß√£o
  const isLastSection = currentSectionIndex >= totalSections - 1;

  const resetStudyProgress = () => {
    setCurrentSectionIndex(0);
    setCompletedSections([]);
    console.log('üîÑ Progresso do estudo resetado');
  };

  const completeStudy = () => {
    console.log('üéØ completeStudy chamada, showCompletionToast atual:', showCompletionToast);
    
    // Marcar √∫ltima se√ß√£o como completa
    const currentSectionKey = `section-${currentSectionIndex}`;
    completeSection(currentSectionKey);
    
    // Mostrar toast de conclus√£o PRIMEIRO
    console.log('üì¢ Definindo showCompletionToast para true (GLOBAL)');
    setShowCompletionToast(true);
    
    console.log('üéâ Estudo conclu√≠do! Parab√©ns!');
    
    // Mostrar todo o conte√∫do novamente ap√≥s um delay maior para dar tempo do toast aparecer
    setTimeout(() => {
      console.log('üìñ Desativando modo estudo');
      setIsStudyModeEnabled(false);
    }, 1500);
    
    // Resetar progresso para pr√≥ximo estudo (ap√≥s o toast desaparecer)
    setTimeout(() => {
      console.log('üîÑ Resetando progresso');
      setCurrentSectionIndex(0);
      setCompletedSections([]);
      setShowCompletionToast(false); // Garantir que o toast seja ocultado
    }, 5000);
  };

  const hideCompletionToast = () => {
    setShowCompletionToast(false);
  };

  return {
    // Estado
    isReadOnly,
    isStudyModeEnabled,
    canEnableStudyMode,
    currentSectionIndex,
    completedSections,
    isGuidedModeActive: isGuidedMode,
    totalSections,
    canGoToNextSection,
    isLastSection,
    showCompletionToast,
    
    // Estados do modal de perguntas
    showQuestionModal,
    pendingSectionIndex,
    
    // A√ß√µes
    toggleStudyMode,
    completeSection,
    goToNextSection,
    completeSectionWithQuestions,
    resetStudyProgress,
    completeStudy,
    hideCompletionToast,
    
    // A√ß√µes do modal de perguntas
    handleQuestionsComplete,
    handleQuestionsSkip,
    getQuestionsForSection,
    hasQuestions,
  };
}
