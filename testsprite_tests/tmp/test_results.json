[
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "9d3456d1-150a-42ec-9cc3-0e723008d83b",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC001-User Authentication with Valid Credentials",
    "description": "Verify that a user can successfully log in using valid credentials through the Supabase authentication system and that the session persists across page reloads.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the login page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Enter valid username/email and password, then click the login button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login with valid credentials failed. The page did not navigate away from the login form and no error message was shown. Further testing cannot proceed until this issue is resolved. Stopping the test here.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608044396771//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.135Z",
    "modified": "2025-10-04T20:00:44.540Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "3a2eb971-c8e2-4a4c-87e5-e0e31ab14f47",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC002-User Authentication with Invalid Credentials",
    "description": "Verify that the system correctly handles login attempts with incorrect username/email or password and prevents access.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate to the login page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test failed: Expected error message for invalid login not found.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to blank page on the login page preventing further login validation tests.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608007118449//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.143Z",
    "modified": "2025-10-04T20:00:07.917Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "72b6a8ad-b50a-4f95-a060-efb789bbad67",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC003-Create Traditional Front/Back Flashcard",
    "description": "Verify user can create a traditional flashcard with distinct front and back content using the rich text editor with advanced formatting.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click the element to navigate to the flashcard creation page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Return to the localhost main page and try to find navigation elements manually or try alternative navigation methods.\n        await page.goto('http://localhost:3000', timeout=10000)\n        \n\n        # Input email and password, then click 'Entrar' to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try alternative valid credentials or check if there is a way to register a new user or reset password.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the registration form with valid new user details and submit to create an account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: Unable to verify flashcard creation and formatting.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical runtime error on registration page preventing account creation and login. Cannot proceed to flashcard creation. Please fix the issue and retry.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dflashcard%2520creation%2520page%2520site:localhost:3000%26udm%3D14%26sei%3DjHzhaIb8EMfU1sQPp_DGgQY&q=EgQtrY3xGIz5hccGIjCv_CWICFI_7bLBpCPXmahhqjsWO9WajE6njEUhdPG9Uy2kDCCbRuZzTD3fkUoBXr8yAVJaAUM:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/anchor?ar=1&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&co=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbTo0NDM.&hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&size=normal&s=XSHQGHe67ZcnoPK7VHbgY_ZYzjn4awMLbql6R7LWtSp_LCAO0kJQKWWZR8swO0epwKc_Gmb0RDH_YutOcQQ0egrtyg28QhwP-d7Cy_pejHTCVosJIyK_NTk670XVt9b9erW-qUUZcUmWeHd0K_pkO-IyiM0sBZXm__voyXplx9T7RMW94DNgQClsesGI23fCQ14IiJDWVgyRzESgF6WY7wCbTktYOOQIOCUcCM-XFVDRY-Yw1qCVycnqS7A4GEp1qIqj5JVQZLr0ZJNbjgkQtnzOjUMwagU&anchor-ms=20000&execute-ms=15000&cb=6ykxogocyrem:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/bframe?hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&bft=0dAFcWeA7l6-lAIKQnuTLiM4G2uzRZkeiSCXlcOfbM557JQxKzvAthynDsAQmLtaNVHqTBXRhgcjKVXUVvWdsgRQifn8V50pfl7A:0:0)\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608250994813//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.156Z",
    "modified": "2025-10-04T20:04:11.140Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "1d518948-7839-489e-8f1d-1f8841269811",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC004-Create Quote-Based Flashcard with Automatic Front/Back Separation",
    "description": "Verify the system automatically separates front and back content when creating a flashcard using quote blocks in the rich text editor.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing because the system requires login before accessing flashcard creation. No credentials were provided to proceed. Cannot verify quote block separation without access to flashcard creation interface.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608051963147//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.164Z",
    "modified": "2025-10-04T20:00:52.113Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "053610c7-a9e7-49b2-a704-ab3a98c01c98",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC005-Create Word-Hiding Flashcard with Syntax Highlighting",
    "description": "Verify creation of word-hiding flashcards where specific words are hidden based on syntax, and that hidden words toggle visibility during study.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or menu elements by scrolling or try to reload or find alternative ways to access flashcard creation.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to reload the page to see if interactive elements appear or try to open a new tab to access flashcard creation.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Input email and password, then click Entrar to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Cadastro' button to try creating a new account for access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the registration form with name, email, password, confirm password and click 'Criar conta' to create a new account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to a critical runtime error on the registration page preventing account creation and login. Unable to proceed with flashcard creation and study verification. Issue reported for resolution.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608126838//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.176Z",
    "modified": "2025-10-04T20:02:06.994Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "33e0913c-146a-4a72-9230-9ed7f43020f3",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC006-Create True/False Flashcard with Optional Explanation",
    "description": "Verify user can create a true/false flashcard and add an optional explanation that is displayed after answer submission.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or menu elements by scrolling or searching for text related to flashcard creation or new flashcard.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Input email and password, then click Entrar (Login) to log in.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check if there is an option to register a new account or reset password to gain access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the registration form with full name, email, password, and password confirmation, then submit the form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task cannot proceed because after attempting to register a new account, the page becomes blank and unresponsive. No flashcard creation or study functionality is accessible. The issue has been reported.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608116050818//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.182Z",
    "modified": "2025-10-04T20:01:56.181Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "6b33bf2c-c71d-453b-b5bd-cc97e8333bce",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC007-Hierarchical Flashcard Parent-Child Creation and Navigation",
    "description": "Verify the creation of hierarchical flashcards supporting parent-child relationships and that navigation between parent and child flashcards works as expected.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and click the button or link to create a new parent flashcard.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed because the flashcards page is blank with no UI elements to interact with. Reported the issue and stopped further actions.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/175960798960445//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.190Z",
    "modified": "2025-10-04T19:59:49.728Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "e32569c8-4bee-4ba5-8794-eff19a9e5fcc",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC008-Deck Creation with Custom Colors and Statistics",
    "description": "Verify user can create thematic decks with custom colors and that each deck displays correct per-deck statistics.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and navigate to the deck management page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Input email and password, then click login button to proceed.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check if there is an option to register a new account or reset password to gain access.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the registration form with full name, email, password, and confirm password, then submit to create account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with testing as registration form does not submit successfully and login credentials are invalid. Please fix the registration or provide valid credentials to continue testing.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608116953694//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.196Z",
    "modified": "2025-10-04T20:01:57.101Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "dad77f56-3584-4417-b2c7-2e64068ab7a2",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC009-Rich Text Note Creation and Automatic Flashcard Conversion",
    "description": "Verify users can create rich text notes including images and formatting, and can convert notes into appropriate flashcard types automatically.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and navigate to the notes creation page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to navigate manually or find alternative ways to access notes creation page on localhost.\n        await page.goto('http://localhost:3000/notes/create', timeout=10000)\n        \n\n        # Click 'Return to Home' link to go back to home page and try to find notes creation page from there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed because the notes creation page is behind a login screen and no credentials were provided. The site also returned a 404 error for the direct notes creation URL. Please provide access credentials or fix the navigation to allow access to the notes creation page.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dnotes%2520creation%2520page%2520site:localhost:3000%26udm%3D14%26sei%3DjHzhaJOAOKrK1sQPs5TOoQw&q=EgQtrY3xGI35hccGIjCCuJC0Jr19HsOOFXBeViN_AhygjzEY6gx-ViTOs_calIEWejm-vxz2kzJjPXX_fQMyAVJaAUM:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/anchor?ar=1&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&co=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbTo0NDM.&hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&size=normal&s=6va_W3UhHUPPcHYc0X4OWWzEithgxLLbVqjPiR_VNIDmUWZJxU0Ee21txuYFQSHST74ROO1mO46YDf_Yt0H0J6LVKIodilRJCKB-yH6FLcuTgR6yfonn-daXOPadnOhhxA29hi3neRBKdXdxkQbCyKXtst03lvqVAd5ZzEKQYCEN-9Dpkx2n7uybLixoK0sMCOO2UO1qO-6IR0TSi_dqmL5muAVHMtF5J4M3mIQVvXyyo7kz9tm7Zg8jtQVCISrsjOletipdwgx0T5WDKGH2yFVNrQp7OQM&anchor-ms=20000&execute-ms=15000&cb=5tciki7tcpfb:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/bframe?hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&bft=0dAFcWeA4N0LxggBBt9es9EohDnzY0QeRDYc9ew2wcXeC7y0pYloIaSZkPUgFB9DNgCgSsaL7_BlbvYojjDu3bX3anEMLCFTqzuw:0:0)\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] 404 Error: User attempted to access non-existent route: /notes/create (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] 404 Error: User attempted to access non-existent route: /notes/create (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608106361433//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.202Z",
    "modified": "2025-10-04T20:01:46.493Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "6f43b0b8-36d1-4769-b6cb-a77cf5456c0d",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC010-FSRS Algorithm Scheduling and Review State Updates",
    "description": "Verify that flashcards are scheduled correctly for review according to the FSRS algorithm including automatic updating of review states and due dates after study response and difficulty rating.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or look for any hidden or off-screen elements to initiate a study session with flashcards due for review.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Input email and password, then click the login button to initiate session.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to login with correct credentials or create a new account if login fails.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the account creation form with valid name, email, password, and confirm password, then submit to create a new account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: FSRS algorithm verification could not be completed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to inability to create an account. The account creation form does not respond or provide feedback after submission, preventing login and access to flashcard study sessions. Unable to verify FSRS algorithm scheduling and review updates.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608119796822//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.208Z",
    "modified": "2025-10-04T20:01:59.930Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "a29cde52-1644-494f-aafb-610f7f0418ae",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC011-Real-Time Study Interface with Timer and Feedback",
    "description": "Verify that the study interface displays a timer, supports focused study mode, provides instant correctness feedback, and correctly tracks study session timing.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The study interface page is blank and does not allow starting a study session or verifying the required features. Testing cannot proceed. The issue has been reported for resolution.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759607985566665//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.214Z",
    "modified": "2025-10-04T19:59:45.692Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "923aef8f-2eb5-4c09-84b7-b7eb2da56221",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC012-Study Progress Analytics and Interactive Dashboard",
    "description": "Verify that the analytics dashboard correctly displays accuracy rates, response times, progress per deck, study calendar with streaks, and FSRS metrics charts updating in real-time with user activity.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input email and password to log in and start study sessions.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Clear the email and password fields and input new credentials if provided, then attempt login again.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The analytics dashboard verification task cannot proceed because the login page is broken due to a runtime error related to missing parameters in 'generateStaticParams()'. This error prevents login and any user activity generation needed for analytics. Please fix the runtime error to continue testing.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608156840239//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.220Z",
    "modified": "2025-10-04T20:02:36.970Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "73202796-e327-4658-b2b2-0fe63c571d8d",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC013-Notes Timeline View and Flashcard Synchronization",
    "description": "Verify that the notes system timeline view correctly displays note history and that edits synchronize properly with linked flashcards.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to blank page issue preventing interaction and note creation. The notes system timeline and flashcard synchronization could not be verified.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759607992397639//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.227Z",
    "modified": "2025-10-04T19:59:52.518Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "e159a22d-6ccc-404a-9473-5fe97fe55f63",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC014-Role-Level Security and Input Validation",
    "description": "Verify that database row-level security (RLS) prevents unauthorized data access and that all user inputs in flashcards, notes, and profile are validated and sanitized to prevent injection and errors.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and attempt to access or modify flashcards or notes of another user through the UI or API.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Input test user credentials and login to access flashcards and notes.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Request or use valid credentials to login or try to register a new user to proceed with testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the registration form with valid test user data and submit to create a new account.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test User')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[3]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div[2]/div/div[3]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "User registration is broken, preventing login and further testing of RLS and input validation. Reporting this critical issue and stopping the test.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/token?grant_type=password:0:0)\n[ERROR] Erro no login: AuthApiError: Invalid login credentials\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signInWithPassword (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:393:23)\n    at async handleLogin (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:46:37) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://xmtleqquivcukwgdexhc.supabase.co/auth/v1/signup:0:0)\n[ERROR] Erro no cadastro: AuthApiError: Email address \"testuser@example.com\" is invalid\n    at handleError (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:80:11)\n    at async _handleRequest (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:123:9)\n    at async _request (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js:105:18)\n    at async SupabaseAuthClient.signUp (webpack-internal:///(app-pages-browser)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js:330:23)\n    at async handleSignUp (webpack-internal:///(app-pages-browser)/./src/components/AuthForm.tsx:80:31) (at webpack-internal:///(app-pages-browser)/./node_modules/next/dist/next-devtools/userspace/app/errors/intercept-console-error.js:56:31)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/175960811196635//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.234Z",
    "modified": "2025-10-04T20:01:52.102Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "ef6e1661-dd77-4af1-86b6-0ccd19d3c79a",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC015-Responsive UI Across Browsers and Devices",
    "description": "Verify that the application UI is fully responsive and accessible on supported desktop browsers and mobile devices, maintaining usability and appearance.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Open the application in Chrome, Firefox, Safari, and Edge at various screen resolutions to verify UI rendering.\n        await page.goto('http://localhost:3000/', timeout=10000)\n        \n\n        # Change the desktop browser window to 1366x768 resolution and verify UI responsiveness and layout.\n        await page.goto('http://localhost:3000/auth', timeout=10000)\n        \n\n        # Open the application in Firefox browser and verify UI responsiveness and accessibility.\n        await page.goto('http://localhost:3000/auth', timeout=10000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The application is currently showing a runtime error related to a missing parameter in 'generateStaticParams()' which prevents the UI from rendering. Due to this error, the responsiveness and accessibility testing cannot proceed further. Please fix the runtime error to continue testing.\nBrowser Console Logs:\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/1759608122573469//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.240Z",
    "modified": "2025-10-04T20:02:02.735Z"
  },
  {
    "projectId": "1d717894-f751-44c1-b9f2-3b461024085f",
    "testId": "70ecde5d-243f-44a0-ab53-17a32e5f8b22",
    "userId": "6478a458-5041-70b0-ce62-91c80d1d6ba5",
    "title": "TC016-Performance Testing with Lazy Loading and Caching",
    "description": "Validate performance optimizations by testing the system behavior when loading large numbers of flashcards and notes, ensuring smooth scrolling, lazy loading, and effective caching without UI freezes.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find or navigate to a section or button to populate flashcards and notes or import data.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Return to the flashcard app at http://localhost:3000 and try to find any developer tools or UI options to populate data.\n        await page.goto('http://localhost:3000', timeout=10000)\n        \n\n        assert False, 'Test plan execution failed: expected result unknown, generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to runtime error on login page blocking UI interaction and preventing data injection for performance testing. Unable to proceed with validation of performance optimizations.\nBrowser Console Logs:\n[ERROR] Failed to load resource: the server responded with a status of 429 () (at https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dhow%2520to%2520populate%2520flashcards%2520and%2520notes%2520with%2520large%2520data%2520in%2520flashcard%2520app%2520localhost:3000%26udm%3D14%26sei%3DjnzhaIHmA5zR1sQPqMqHuQ8&q=EgQtrY3xGI75hccGIjCmUlUpxMJ3VcmEGc31ViJ6xUaNwd10D7HyOUMGdY1P8PLqQ5Bw-FFShMbn5IamQWoyAVJaAUM:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/anchor?ar=1&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&co=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbTo0NDM.&hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&size=normal&s=npDtUxT7IDlrkGXtI1pAdCk8kBezIlItgl1ONyrDx14y3FLjS7cpjA1N2-jbgPYM4gjAglnIgMa0dbE5C4-llTstqKpl_occt0qIhHDHx4DRIbKNcUu9ZAMsaZVYQGKGyGDd1R0IBuLsR8Gnr9vdR6KuaKFmz_YrDh4eL1LTRCS5pdHlNbdvWAd--nhavc7ZYB17W5IkeP26XwdsYCwp5D6GH-P9NyNzaCXZrjhhkIf5l8NjFrIsklHXyJlM2SlHV7bXyprdCzyUzO0YPCffT5mme3MIINs&anchor-ms=20000&execute-ms=15000&cb=plkx8ev741ze:0:0)\n[WARNING] An iframe which has both allow-scripts and allow-same-origin for its sandbox attribute can escape its sandboxing. (at https://www.google.com/recaptcha/enterprise/bframe?hl=en&v=Jv8jlA-BQE5JD6rA-h_iqNH2&k=6LdLLIMbAAAAAIl-KLj9p1ePhM-4LCCDbjtJLqRO&bft=0dAFcWeA6P3WFiqF_3gXob1xR5i0SXKd-Jyq25_eOd4_kNQ13-s_0gFI5QTmtGCyIKK_2s6hGiVLdH0qwfnxrEZi-m-uEHmOgxWg:0:0)\n[WARNING] If you are profiling the playground app, please ensure you turn off the debug view. You can disable it by pressing on the settings control in the bottom-left of your screen and toggling the debug view setting. (at webpack-internal:///(app-pages-browser)/./src/components/lexical-playground/App.tsx:58:8)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth?_rsc=1el9o:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/auth:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/6478a458-5041-70b0-ce62-91c80d1d6ba5/175960811441381//tmp/test_task/result.webm",
    "created": "2025-10-04T19:58:47.247Z",
    "modified": "2025-10-04T20:01:54.548Z"
  }
]
